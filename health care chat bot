{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPrS0TuOUvCZP1C3rD1mVJ1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shivubiradar/atm-management-using-java/blob/main/health%20care%20chat%20bot\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Ewo2Gksu8NEK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b50274b-e465-47ce-c89e-ad12bda2ee7a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install pyttsx3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kNpv-cukv4S1",
        "outputId": "437b058a-5c8b-46f4-bb6b-13757309ecbb"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyttsx3\n",
            "  Downloading pyttsx3-2.90-py3-none-any.whl (39 kB)\n",
            "Installing collected packages: pyttsx3\n",
            "Successfully installed pyttsx3-2.90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import pandas as pd\n",
        "import pyttsx3\n",
        "from sklearn import preprocessing\n",
        "from sklearn.tree import DecisionTreeClassifier, _tree\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.svm import SVC\n",
        "import csv\n",
        "import warnings\n",
        "\n",
        "warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
        "\n",
        "training = pd.read_csv(r'/content/drive/MyDrive/healthcare-chatbot-master/Data/Training.csv')\n",
        "testing = pd.read_csv(r'/content/drive/MyDrive/healthcare-chatbot-master/Data/Testing.csv')\n",
        "cols = training.columns\n",
        "cols = cols[:-1]\n",
        "x = training[cols]\n",
        "y = training['prognosis']\n",
        "y1 = y\n",
        "\n",
        "reduced_data = training.groupby(training['prognosis']).max()\n",
        "\n",
        "# mapping strings to numbers\n",
        "le = preprocessing.LabelEncoder()\n",
        "le.fit(y)\n",
        "y = le.transform(y)\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)\n",
        "testx = testing[cols]\n",
        "testy = testing['prognosis']\n",
        "testy = le.transform(testy)\n",
        "\n",
        "clf1 = DecisionTreeClassifier()\n",
        "clf = clf1.fit(x_train, y_train)\n",
        "# print(clf.score(x_train,y_train))\n",
        "# print (\"cross result========\")\n",
        "scores = cross_val_score(clf, x_test, y_test, cv=3)\n",
        "# print (scores)\n",
        "print(scores.mean())\n",
        "\n",
        "model = SVC()\n",
        "model.fit(x_train, y_train)\n",
        "print(\"for svm: \")\n",
        "print(model.score(x_test, y_test))\n",
        "\n",
        "importances = clf.feature_importances_\n",
        "indices = np.argsort(importances)[::-1]\n",
        "features = cols\n",
        "\n",
        "\n",
        "def readn(nstr):\n",
        "    engine = pyttsx3.init()\n",
        "\n",
        "    engine.setProperty('voice', \"english+f5\")\n",
        "    engine.setProperty('rate', 130)\n",
        "\n",
        "    engine.say(nstr)\n",
        "    engine.runAndWait()\n",
        "    engine.stop()\n",
        "\n",
        "\n",
        "severityDictionary = dict()\n",
        "description_list = dict()\n",
        "precautionDictionary = dict()\n",
        "\n",
        "symptoms_dict = {}\n",
        "\n",
        "for index, symptom in enumerate(x):\n",
        "    symptoms_dict[symptom] = index\n",
        "\n",
        "\n",
        "def calc_condition(exp, days):\n",
        "    sum = 0\n",
        "    for item in exp:\n",
        "        sum = sum + severityDictionary[item]\n",
        "    if ((sum * days) / (len(exp) + 1) > 3):\n",
        "        print(\"You should take the consultation from doctor. \")\n",
        "    else:\n",
        "        print(\"It might not be that bad but you should take precautions.\")\n",
        "\n",
        "\n",
        "def getDescription():\n",
        "    global description_list\n",
        "    with open('/content/drive/MyDrive/healthcare-chatbot-master/MasterData/symptom_Description.csv') as csv_file:\n",
        "        csv_reader = csv.reader(csv_file, delimiter=',')\n",
        "        line_count = 0\n",
        "        for row in csv_reader:\n",
        "            _description = {row[0]: row[1]}\n",
        "            description_list.update(_description)\n",
        "\n",
        "\n",
        "def getSeverityDict():\n",
        "    global severityDictionary\n",
        "    with open('/content/drive/MyDrive/healthcare-chatbot-master/MasterData/Symptom_severity.csv') as csv_file:\n",
        "\n",
        "        csv_reader = csv.reader(csv_file, delimiter=',')\n",
        "        line_count = 0\n",
        "        try:\n",
        "            for row in csv_reader:\n",
        "                _diction = {row[0]: int(row[1])}\n",
        "                severityDictionary.update(_diction)\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "\n",
        "def getprecautionDict():\n",
        "    global precautionDictionary\n",
        "    with open('/content/drive/MyDrive/healthcare-chatbot-master/MasterData/symptom_precaution.csv') as csv_file:\n",
        "        csv_reader = csv.reader(csv_file, delimiter=',')\n",
        "        line_count = 0\n",
        "        for row in csv_reader:\n",
        "            _prec = {row[0]: [row[1], row[2], row[3], row[4]]}\n",
        "            precautionDictionary.update(_prec)\n",
        "\n",
        "\n",
        "def getInfo():\n",
        "    print(\"-----------------------------------HealthCare ChatBot-----------------------------------\")\n",
        "    print(\"\\nYour Name? \\t\\t\\t\\t\", end=\"->\")\n",
        "    name = input(\"\")\n",
        "    print(\"Hello, \", name)\n",
        "\n",
        "\n",
        "def check_pattern(dis_list, inp):\n",
        "    pred_list = []\n",
        "    inp = inp.replace(' ', '_')\n",
        "    patt = f\"{inp}\"\n",
        "    regexp = re.compile(patt)\n",
        "    pred_list = [item for item in dis_list if regexp.search(item)]\n",
        "    if (len(pred_list) > 0):\n",
        "        return 1, pred_list\n",
        "    else:\n",
        "        return 0, []\n",
        "\n",
        "\n",
        "def sec_predict(symptoms_exp):\n",
        "    df = pd.read_csv('/content/drive/MyDrive/healthcare-chatbot-master/Data/Training.csv')\n",
        "    X = df.iloc[:, :-1]\n",
        "    y = df['prognosis']\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=20)\n",
        "    rf_clf = DecisionTreeClassifier()\n",
        "    rf_clf.fit(X_train, y_train)\n",
        "\n",
        "    symptoms_dict = {symptom: index for index, symptom in enumerate(X)}\n",
        "    input_vector = np.zeros(len(symptoms_dict))\n",
        "    for item in symptoms_exp:\n",
        "        input_vector[[symptoms_dict[item]]] = 1\n",
        "\n",
        "    return rf_clf.predict([input_vector])\n",
        "\n",
        "\n",
        "def print_disease(node):\n",
        "    node = node[0]\n",
        "    val = node.nonzero()\n",
        "    disease = le.inverse_transform(val[0])\n",
        "    return list(map(lambda x: x.strip(), list(disease)))\n",
        "\n",
        "\n",
        "def tree_to_code(tree, feature_names):\n",
        "    tree_ = tree.tree_\n",
        "    feature_name = [\n",
        "        feature_names[i] if i != _tree.TREE_UNDEFINED else \"undefined!\"\n",
        "        for i in tree_.feature\n",
        "    ]\n",
        "\n",
        "    chk_dis = \",\".join(feature_names).split(\",\")\n",
        "    symptoms_present = []\n",
        "\n",
        "    while True:\n",
        "\n",
        "        print(\"\\nEnter the symptom you are experiencing  \\t\\t\", end=\"->\")\n",
        "        disease_input = input(\"\")\n",
        "\n",
        "        conf, cnf_dis = check_pattern(chk_dis, disease_input)\n",
        "        if conf == 1:\n",
        "            print(\"searches related to input: \")\n",
        "            for num, it in enumerate(cnf_dis):\n",
        "                print(num, \")\", it)\n",
        "            if num != 0:\n",
        "                print(f\"Select the one you meant (0 - {num}):  \", end=\"\")\n",
        "                conf_inp = int(input(\"\"))\n",
        "            else:\n",
        "                conf_inp = 0\n",
        "\n",
        "            disease_input = cnf_dis[conf_inp]\n",
        "            break\n",
        "            # print(\"Did you mean: \",cnf_dis,\"?(yes/no) :\",end=\"\")\n",
        "            # conf_inp = input(\"\")\n",
        "            # if(conf_inp==\"yes\"):\n",
        "            #     break\n",
        "        else:\n",
        "            print(\"Enter valid symptom.\")\n",
        "\n",
        "    while True:\n",
        "        try:\n",
        "            num_days = int(input(\"Okay. From how many days ? : \"))\n",
        "            break\n",
        "        except:\n",
        "            print(\"Enter valid input.\")\n",
        "\n",
        "    def recurse(node, depth):\n",
        "        indent = \"  \" * depth\n",
        "        if tree_.feature[node] != _tree.TREE_UNDEFINED:\n",
        "            name = feature_name[node]\n",
        "            threshold = tree_.threshold[node]\n",
        "\n",
        "            if name == disease_input:\n",
        "                val = 1\n",
        "            else:\n",
        "                val = 0\n",
        "            if val <= threshold:\n",
        "                recurse(tree_.children_left[node], depth + 1)\n",
        "            else:\n",
        "                symptoms_present.append(name)\n",
        "                recurse(tree_.children_right[node], depth + 1)\n",
        "        else:\n",
        "            present_disease = print_disease(tree_.value[node])\n",
        "            # print( \"You may have \" +  present_disease )\n",
        "            red_cols = reduced_data.columns\n",
        "            symptoms_given = red_cols[reduced_data.loc[present_disease].values[0].nonzero()]\n",
        "            # dis_list=list(symptoms_present)\n",
        "            # if len(dis_list)!=0:\n",
        "            #     print(\"symptoms present  \" + str(list(symptoms_present)))\n",
        "            # print(\"symptoms given \"  +  str(list(symptoms_given)) )\n",
        "            print(\"Are you experiencing any \")\n",
        "            symptoms_exp = []\n",
        "            for syms in list(symptoms_given):\n",
        "                inp = \"\"\n",
        "                print(syms, \"? : \", end='')\n",
        "                while True:\n",
        "                    inp = input(\"\")\n",
        "                    if (inp == \"yes\" or inp == \"no\"):\n",
        "                        break\n",
        "                    else:\n",
        "                        print(\"provide proper answers i.e. (yes/no) : \", end=\"\")\n",
        "                if (inp == \"yes\"):\n",
        "                    symptoms_exp.append(syms)\n",
        "\n",
        "            second_prediction = sec_predict(symptoms_exp)\n",
        "            # print(second_prediction)\n",
        "            calc_condition(symptoms_exp, num_days)\n",
        "            if (present_disease[0] == second_prediction[0]):\n",
        "                print(\"You may have \", present_disease[0])\n",
        "                print(description_list[present_disease[0]])\n",
        "\n",
        "                # readn(f\"You may have {present_disease[0]}\")\n",
        "                # readn(f\"{description_list[present_disease[0]]}\")\n",
        "\n",
        "            else:\n",
        "                print(\"You may have \", present_disease[0], \"or \", second_prediction[0])\n",
        "                print(description_list[present_disease[0]])\n",
        "                print(description_list[second_prediction[0]])\n",
        "\n",
        "            # print(description_list[present_disease[0]])\n",
        "            precution_list = precautionDictionary[present_disease[0]]\n",
        "            print(\"Take following measures : \")\n",
        "            for i, j in enumerate(precution_list):\n",
        "                print(i + 1, \")\", j)\n",
        "\n",
        "            # confidence_level = (1.0*len(symptoms_present))/len(symptoms_given)\n",
        "            # print(\"confidence level is \" + str(confidence_level))\n",
        "\n",
        "    recurse(0, 1)\n",
        "\n",
        "\n",
        "getSeverityDict()\n",
        "getDescription()\n",
        "getprecautionDict()\n",
        "getInfo()\n",
        "tree_to_code(clf, cols)\n",
        "print(\"----------------------------------------------------------------------------------------\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fPgK6SfZ9sdw",
        "outputId": "407b27e8-52b3-4d47-a2e3-df98dc370d8c"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9747551911748323\n",
            "for svm: \n",
            "1.0\n",
            "-----------------------------------HealthCare ChatBot-----------------------------------\n",
            "\n",
            "Your Name? \t\t\t\t->shivu\n",
            "Hello,  shivu\n",
            "\n",
            "Enter the symptom you are experiencing  \t\t->headache\n",
            "searches related to input: \n",
            "0 ) headache\n",
            "Okay. From how many days ? : 10\n",
            "Are you experiencing any \n",
            "back_pain ? : yes\n",
            "weakness_in_limbs ? : yes\n",
            "neck_pain ? : yes\n",
            "dizziness ? : yes\n",
            "loss_of_balance ? : yes\n",
            "You should take the consultation from doctor. \n",
            "You may have  Cervical spondylosis\n",
            "Cervical spondylosis is a general term for age-related wear and tear affecting the spinal disks in your neck. As the disks dehydrate and shrink, signs of osteoarthritis develop, including bony projections along the edges of bones (bone spurs).\n",
            "Take following measures : \n",
            "1 ) use heating pad or cold pack\n",
            "2 ) exercise\n",
            "3 ) take otc pain reliver\n",
            "4 ) consult doctor\n",
            "----------------------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    }
  ]
}